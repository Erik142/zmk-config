#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"

#define BASE 0
#define COLEMAK 1
#define NUM 2
#define SYM 3
#define MEDIA 4
#define NAV 5
#define MOUSE 6
#define FUNCTION 7
#define BOOTLOADER 8

#include "mouse.dtsi"

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&lt {
    flavor = "balanced";
    quick-tap-ms = <QUICK_TAP_MS>; \
};

&caps_word {
    continue-list = <BSPC UNDERSCORE MINUS K_CANCEL>;
};


/* Hold-taps */

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1                                              // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <170>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)


/* Conditional layers */
ZMK_CONDITIONAL_LAYER(MEDIA FUNCTION, BOOTLOADER)

/* Combo definitions */

#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <100>;

#undef COMBO_TERM_FAST
#undef COMBO_TERM_SLOW
#define COMBO_TERM_FAST 20
#define COMBO_TERM_SLOW 35

ZMK_COMBO(grave, &kp GRAVE, RM0 RM1, SYM, COMBO_TERM_SLOW)
ZMK_COMBO(caps, &smart_caps_word, LM1 LM2 LM3, BASE COLEMAK, COMBO_TERM_SLOW)
/* Macro definitions */

ZMK_BEHAVIOR(macro_cut, macro,
    bindings
        = <&macro_press &kp LCTL>
        , <&macro_tap &kp X>
        , <&macro_release &kp LCTL>
        ;
)

ZMK_BEHAVIOR(macro_copy, macro,
    bindings
        = <&macro_press &kp LCTL>
        , <&macro_tap &kp C>
        , <&macro_release &kp LCTL>
        ;
)

ZMK_BEHAVIOR(macro_paste, macro,
    bindings
        = <&macro_press &kp LCTL>
        , <&macro_tap &kp V>
        , <&macro_release &kp LCTL>
        ;
)

ZMK_BEHAVIOR(macro_undo, macro,
    bindings
        = <&macro_press &kp LCTL>
        , <&macro_tap &kp Z>
        , <&macro_release &kp LCTL>
        ;
)

ZMK_BEHAVIOR(macro_redo, macro,
    bindings
        = <&macro_press &kp LCTL>
        , <&macro_tap &kp Y>
        , <&macro_release &kp LCTL>
        ;
)

/* Tap dance behaviors */

ZMK_BEHAVIOR(lbkt, tap_dance, \
    tapping-term-ms = <225>; \
    bindings = <&kp LBKT>, <&kp LBRC>; \
)

ZMK_BEHAVIOR(rbkt, tap_dance, \
    tapping-term-ms = <225>; \
    bindings = <&kp RBKT>, <&kp RBRC>; \
)

ZMK_BEHAVIOR(perquest, tap_dance, \
    tapping-term-ms = <225>; \
    bindings = <&kp PERCENT>, <&kp QMARK>; \
)

ZMK_BEHAVIOR(plequal, tap_dance, \
    tapping-term-ms = <225>; \
    bindings = <&kp PLUS>, <&kp EQUAL>; \
)

#define MAKE_MO_TD(NAME, LAYER, SMART_LAYER) \
    ZMK_BEHAVIOR(NAME, tap_dance, \
        tapping-term-ms = <225>; \
        bindings = <&sl LAYER>, <SMART_LAYER>; \
    )

MAKE_MO_TD(num, NUM, &num_word)
MAKE_MO_TD(sym, SYM, &smart_sym)
MAKE_MO_TD(nav, NAV, &smart_nav)
MAKE_MO_TD(mouse, MOUSE, &tog MOUSE)

/* Smart behaviors */

// smart caps_word behavior
ZMK_BEHAVIOR(smart_caps_word, macro,
    bindings
        = <&caps_word>
        , <&to BASE>
        ;
)

// smart symbol layer behavior
ZMK_BEHAVIOR(smart_sym, caps_word,
    layers = <SYM>;
    continue-list = <EXCL AT HASH DOLLAR PERCENT CARET AMPERSAND LPAR RPAR UNDERSCORE QMARK LBKT LBRC RBKT RBRC TILDE GRAVE PIPE BACKSLASH>;
    ignore-modifiers;
)

// smart navigation layer behavior
ZMK_BEHAVIOR(smart_nav, caps_word,
    layers = <NAV>;
    continue-list = <LEFT DOWN UP RIGHT HOME PAGE_UP PAGE_DOWN END PSCRN>;
    ignore-modifiers;
)

&num_word {
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR EQUAL SLASH>;
    ignore-modifiers;
};

/* Layer definitions */

ZMK_LAYER(base,
		&kp Q &kp W &kp E &kp R &kp T 								&kp Y &kp U  &kp I    &kp O   &kp P 
		&hml LGUI A &hml LCTL S &hml LSFT D &hml RALT F &hml LALT G 			&hmr LALT H &hmr RALT J &hmr RSFT K &hmr RCTL L &hmr RGUI SCLN
		&kp Z &kp X &kp C &kp V &kp B				        			&kp N &kp M  &kp CMMA &kp DOT &kp APOS
          				&num &lt NAV BKSP  				&lt FUNCTION SPC &lt MEDIA RET
)

ZMK_LAYER(colemak,
		&kp Q &kp W &kp F &kp P &kp B 								&kp J &kp L  &kp U    &kp Y   &kp SCLN 
		&hml LGUI A &hml LCTL R &hml LSFT S &hml RALT T &hml LALT G 			&hmr LALT M &hmr RALT N &hmr RSFT E &hmr RCTL I &hmr RGUI O
		&kp Z &kp X &kp C &kp D &kp V				        			&kp K &kp H  &kp CMMA &kp DOT &kp APOS
          				&num &lt NAV BKSP  				&lt FUNCTION SPC &lt MEDIA RET
)

ZMK_LAYER(num,
		&kp ESC  &trans    &trans    &trans    &trans			&kp STAR &kp NUM_7 &kp NUM_8 &kp NUM_9 &trans 
		&kp LGUI  &kp LCTL    &sym    &kp RALT    &kp LALT 		&plequal &kp NUM_4  &kp NUM_5 &kp NUM_6  &kp SLASH 
		&trans  &trans    &trans    &trans    &trans 			&kp MINUS &kp NUM_1 &kp NUM_2 &kp NUM_3  &kp NUM_0 
					    &trans  &nav  					&kp K_CANCEL &trans 
)

ZMK_LAYER(sym,
		&kp ESC  &trans    &trans    &trans    &trans			&lbkt &kp AMPERSAND &kp LPAR &kp RPAR &rbkt 
		&kp LGUI  &kp LCTL    &sk LSFT    &kp RALT    &kp LALT 		&kp TILDE &kp DOLLAR  &perquest &kp CARET  &kp BACKSLASH 
		&trans  &trans    &trans    &trans    &trans 			&kp UNDERSCORE &kp EXCL &kp AT &kp HASH  &kp PIPE 
					    &trans  &trans  					&kp K_CANCEL &trans 
)

ZMK_LAYER(media,
		&trans &trans &trans &trans &trans 			        &trans &trans &caps_word &trans &trans
		&kp C_PREV  &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &kp C_NEXT     &kp LALT &kp RALT &kp RSFT &kp RCTL &kp RGUI 
		&trans  &trans &trans &trans &trans   			        &trans &trans &trans &trans &trans   
			&kp C_PLAY_PAUSE &trans  				       &trans &trans
)

ZMK_LAYER(nav,
		&kp ESC  &trans    &caps_word    &trans    &trans		&macro_undo &macro_cut &macro_copy &macro_paste &macro_redo 
		&kp LGUI  &kp LCTL    &mouse    &kp RALT    &kp LALT 		&kp LEFT &kp DOWN &kp UP &kp RIGHT &trans 
		&trans  &trans    &trans    &trans    &trans 			&kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END &kp PSCRN 
					    &trans  &trans  	            &kp K_CANCEL &trans 
)

ZMK_LAYER(mouse,
		&trans  &trans    &trans    &trans    &trans		&trans U_WH_D U_WH_U &trans &trans 
		&trans  &trans    &trans    &trans    &trans 		U_MS_L U_MS_D U_MS_U U_MS_R &trans 
		&trans  &trans    &trans    &trans    &trans 		&trans &trans &trans &trans &trans
					    U_BTN1  U_BTN2           &to BASE &trans 
)

ZMK_LAYER(function,
		&kp F12  &kp F7 &kp F8 &kp F9 &kp CAPS 			&trans &trans &caps_word &trans &trans
		&kp F11  &kp F4 &kp F5 &kp F6 &trans  			&kp LALT &kp RALT &kp RSFT &kp RCTL &kp RGUI 
		&kp F10  &kp F1 &kp F2 &kp F3 &trans   			&trans &trans &trans &trans &trans   
			 &kp TAB &kp DEL  					&trans &to BASE 
)

ZMK_LAYER(bootloader,
		&bootloader  &trans &trans &tog BASE &tog COLEMAK 	        &trans &trans &trans &trans &bootloader
		&trans  &bt BT_PRV &bt BT_CLR &bt BT_NXT &trans  			&trans &trans &trans &trans &trans 
		&bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   			&trans &trans &trans &trans &trans   
					 &trans &trans  					&trans &trans 
)
