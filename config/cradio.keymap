/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NUM 1
#define SYM 2
#define MEDIA 3
#define NAV 4
#define FUNCTION 5
#define BOOTLOADER 6

&lt {
  quick-tap-ms = <200>;
  flavor = "balanced";
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
        combos {
            compatible = "zmk,combos";
            combo_esc_left {
                timeout-ms = <50>;
                key-positions = <10 11 12 13>;
                bindings = <&caps_word>;
            };
	    
	    combo_esc_right {
                timeout-ms = <50>;
                key-positions = <16 17 18 19>;
                bindings = <&caps_word>;
            };
        };
	
        macros {
	    macro_cut: macro_cut {
                label = "ZM_macro_cut";
                compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp X>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
            macro_copy: macro_copy {
                label = "ZM_macro_copy";
                compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp C>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
	    macro_paste: macro_paste {
                label = "ZM_macro_paste";
                compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp V>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
	    macro_undo: macro_undo {
                label = "ZM_macro_undo";
                compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp Z>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
	    macro_redo: macro_redo {
                label = "ZM_macro_redo";
                compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp Y>
                    , <&macro_release &kp LCTL>
                    ;
            };
        };
	
	conditional_layers {
            compatible = "zmk,conditional-layers";
            bootloader_layer {
                if-layers = <MEDIA FUNCTION>;
                then-layer = <BOOTLOADER>;
            };
        };
	
	behaviors {
	    hm: home_row_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOME_ROW_HOLD_TAP";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <225>;                        // <---[[produces tap if held longer than tapping-term-ms]]
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
            };
	    
	    hms: home_mods_shift {
                compatible = "zmk,behavior-hold-tap";
                label = "HOME_ROW_SHIFT_HOLD_TAP";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <175>;                        // <---[[produces tap if held longer than tapping-term-ms]]
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
            };
	    
	    td_tg: tap_dance_0 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_0";
                #binding-cells = <0>;
                tapping-term-ms = <175>;
                bindings = <&kp TILDE>, <&kp GRAVE>;
            };
	    
	    td_ep: tap_dance_1 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_1";
                #binding-cells = <0>;
                tapping-term-ms = <175>;
                bindings = <&kp EQUAL>, <&kp PLUS>;
            };
	    
	    td_lb: tap_dance_2 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_2";
                #binding-cells = <0>;
                tapping-term-ms = <175>;
                bindings = <&kp LBKT>, <&kp LBRC>;
            };
	    
	    td_rb: tap_dance_3 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_3";
                #binding-cells = <0>;
                tapping-term-ms = <225>;
                bindings = <&kp RBKT>, <&kp RBRC>;
            };
	    
	    tdll: tap_dance_layer_left {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_LAYER_LEFT";
                #binding-cells = <0>;
                tapping-term-ms = <250>;
                bindings = <&mo NUM>, <&mo SYM>;
            };
	};

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 								&kp Y &kp U  &kp I    &kp O   &kp P 
		&hms LGUI A &hm LCTL S &hms LSFT D &hms RALT F &hm LALT G 			&hm LALT H &hms RALT J &hms RSFT K &hm RCTL L &hms RGUI SCLN
		&kp Z &kp X &kp C &kp V &kp B				        			&kp N &kp M  &kp CMMA &kp DOT &kp APOS
          				&mo NUM &lt NAV BKSP  				&lt FUNCTION SPC &lt MEDIA RET
		>;
		};

		num_layer {
		bindings = <
		&kp ESC  &trans    &caps_word    &trans    &trans			&kp STAR &kp NUM_7 &kp NUM_8 &kp NUM_9 &trans 
		&kp LGUI  &kp LCTL    &mo SYM    &kp RALT    &kp LALT 		&td_ep &kp NUM_4  &kp NUM_5 &kp NUM_6  &kp SLASH 
		&trans  &trans    &trans    &trans    &trans 			&kp MINUS &kp NUM_1 &kp NUM_2 &kp NUM_3  &kp NUM_0 
					    &trans  &trans  					&trans &trans 
		>;
		};
		
		sym_layer {
		bindings = <
		&kp ESC  &trans    &caps_word    &trans    &trans			&td_lb &kp AMPERSAND &kp LPAR &kp RPAR &td_rb 
		&kp LGUI  &kp LCTL    &kp LSFT    &kp RALT    &kp LALT 		&td_tg &kp DOLLAR  &kp PERCENT &kp CARET  &kp SLASH 
		&trans  &trans    &trans    &trans    &trans 			&kp UNDERSCORE &kp EXCL &kp AT &kp HASH  &kp BACKSLASH 
					    &trans  &trans  					&trans &trans 
		>;
		};
		
		media_layer {
		bindings = <
		&trans &trans &trans &trans &trans 			        &trans &trans &caps_word &trans &trans
		&kp C_PREV  &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &kp C_NEXT     &kp LALT &kp RALT &kp RSFT &kp RCTL &kp RGUI 
		&trans  &trans &trans &trans &trans   			        &trans &trans &trans &trans &trans   
			&kp C_PLAY_PAUSE &trans  				       &trans &trans
		>;
		};
		
		nav_layer {
		bindings = <
		&kp ESC  &trans    &caps_word    &trans    &trans		&macro_undo &macro_cut &macro_copy &macro_paste &macro_redo 
		&kp LGUI  &kp LCTL    &kp LSFT    &kp RALT    &kp LALT 		&kp LEFT &kp DOWN &kp UP &kp RIGHT &trans 
		&trans  &trans    &trans    &trans    &trans 			&kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END &kp PSCRN 
					    &trans  &trans  					&trans &trans 
		>;
		};
		
		function_layer {
		bindings = <
		&kp F12  &kp F7 &kp F8 &kp F9 &kp CAPS 			&trans &trans &caps_word &trans &trans
		&kp F11  &kp F4 &kp F5 &kp F6 &trans  			&kp LALT &kp RALT &kp RSFT &kp RCTL &kp RGUI 
		&kp F10  &kp F1 &kp F2 &kp F3 &trans   			&trans &trans &trans &trans &trans   
			 &kp TAB &kp DEL  					&trans &to BASE 
		>;
		};
		
		bootloader_layer {
		bindings = <
		&bootloader  &trans &trans &trans &trans 	        &trans &trans &trans &trans &bootloader
		&trans  &bt BT_PRV &bt BT_CLR &bt BT_NXT &trans  			&trans &trans &trans &trans &trans 
		&bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   			&trans &trans &trans &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};
        
	};
};
