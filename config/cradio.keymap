/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NUM 1
#define SYM 2
#define NAV 4
#define MEDIA 3

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <250>;
};

&lt {
  quick-tap-ms = <300>;
  flavor = "tap-preferred";
};

/ {
        macros {
	    macro_cut: macro_cut {
                label = "ZM_macro_cut";
                compatible = "zmk,behavior-macro";
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp X>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
            macro_copy: macro_copy {
                label = "ZM_macro_copy";
                compatible = "zmk,behavior-macro";
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp C>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
	    macro_paste: macro_paste {
                label = "ZM_macro_paste";
                compatible = "zmk,behavior-macro";
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp V>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
	    macro_undo: macro_undo {
                label = "ZM_macro_undo";
                compatible = "zmk,behavior-macro";
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp Z>
                    , <&macro_release &kp LCTL>
                    ;
            };
	    
	    macro_redo: macro_redo {
                label = "ZM_macro_redo";
                compatible = "zmk,behavior-macro";
                bindings
                    = <&macro_press &kp LCTL>
                    , <&macro_tap &kp Y>
                    , <&macro_release &kp LCTL>
                    ;
            };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            nav_layer {
                if-layers = <NUM MEDIA>;
                then-layer = <NAV>;
            };
        };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						&kp Y &kp U  &kp I    &kp O   &kp P 
		&mt LGUI A &mt LCTL S &mt LSFT D &mt RALT F &kp G 			&kp H &mt RALT J &mt RSFT K &mt RCTL L &mt RGUI SCLN
		&mt LSFT Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp CMMA &kp DOT &kp APOS
          				&lt NUM ESC &lt SYM BKSP  				&lt 4 SPC &lt MEDIA RET 
		>;
		};

		num_layer {
		bindings = <
		&trans  &trans    &trans    &trans    &trans			&trans &kp NUM_7 &kp NUM_8 &kp NUM_9 &trans 
		&kp LGUI  &kp LCTL    &kp LSFT    &kp RALT    &trans 		&kp EQUAL &kp NUM_4  &kp NUM_5 &kp NUM_6  &trans 
		&trans  &trans    &trans    &trans    &trans 			&kp MINUS &kp NUM_1 &kp NUM_2 &kp NUM_3  &kp NUM_0 
					    &trans  &trans  					&trans &trans 
		>;
		};
		
		sym_layer {
		bindings = <
		&trans  &trans    &trans    &trans    &trans			&kp LBKT &kp AMPERSAND &kp LPAR &kp RPAR &kp RBKT 
		&kp LGUI  &kp LCTL    &kp LSFT    &kp RALT    &trans 		&kp EQUAL &kp DOLLAR  &kp PERCENT &kp CARET  &kp SLASH 
		&trans  &trans    &trans    &trans    &trans 			&kp MINUS &kp EXCL &kp AT &kp HASH  &kp NON_US_BACKSLASH 
					    &trans  &trans  					&trans &trans 
		>;
		};
		
		tri_layer {
		bindings = <
		&bootloader  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &bootloader
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};
		
		nav_layer {
		bindings = <
		&trans  &trans    &trans    &trans    &trans			&macro_undo &macro_cut &macro_copy &macro_paste &macro_redo 
		&kp LGUI  &kp LCTL    &kp LSFT    &kp RALT    &trans 		&kp LEFT &kp DOWN  &kp UP &kp RIGHT  &trans 
		&trans  &trans    &trans    &trans    &trans 			&trans &trans &trans &trans  &trans 
					    &trans  &trans  					&trans &trans 
		>;
		};	
        
	};
};
